#!/usr/bin/env python3
import json
import subprocess
import time
import argparse

def main():
    parser = argparse.ArgumentParser(description="Extended Setup for Ave Caesar Race")
    parser.add_argument("--json-file", default="track.json",
                        help="Path to the JSON file with track description (generated by extended_circular_course.py)")
    parser.add_argument("--broker", default="localhost:9092",
                        help="Kafka broker address")
    parser.add_argument("--start", action="store_true",
                        help="If set, the start-goal segment will automatically send initial tokens")
    parser.add_argument("--runden", type=int, default=3,
                        help="Maximum rounds (for start-goal segments)")
    parser.add_argument("--wagen", nargs="+", default=["A", "B", "C"],
                        help="List of vehicle IDs to send (for start-goal segments)")
    args = parser.parse_args()

    # Read the track JSON file
    with open(args.json_file, "r", encoding="utf-8") as f:
        track_data = json.load(f)

    processes = []
    # For each track and each segment within that track, start a process
    for track in track_data.get("tracks", []):
        for segment in track.get("segments", []):
            seg_id = segment["segmentId"]
            seg_type = segment["type"]
            next_segments = segment["nextSegments"]

            # Build the command for the segment process:
            # The basic command is:
            #   python segment_extended.py --segment-id <seg_id> --next-segments <list> --broker <broker> --type <seg_type>
            cmd = ["python", "segment_extended.py",
                   "--segment-id", seg_id,
                   "--next-segments"] + next_segments + [
                   "--broker", args.broker,
                   "--type", seg_type]

            # If the segment is start-goal and the --start flag was provided,
            # then add additional parameters to immediately produce tokens.
            if seg_type == "start-goal":
                if args.start:
                    cmd.append("--start")
                cmd.extend(["--runden", str(args.runden)])
                cmd.extend(["--wagen"] + args.wagen)

            print("Starting segment with command:", " ".join(cmd))
            p = subprocess.Popen(cmd)
            processes.append(p)

    print("All segments have been started. The race will begin automatically if '--start' was provided.")
    print("Press Ctrl+C to stop all processes.")
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("Terminating all segment processes...")
        for p in processes:
            p.terminate()
        print("All processes terminated.")

if __name__ == "__main__":
    main()
